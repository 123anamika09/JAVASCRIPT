var TimeLimitedCache = function() {
    this.cache = new Map(); // Map to store key -> { value, expiryTime }
};

/** 
 * @param {number} key
 * @param {number} value
 * @param {number} duration time until expiration in ms
 * @return {boolean} if un-expired key already existed
 */
TimeLimitedCache.prototype.set = function(key, value, duration) {
    const currentTime = Date.now();
    const expiryTime = currentTime + duration;

    const existing = this.cache.get(key);

    const existsAndNotExpired = existing && existing.expiry > currentTime;

    this.cache.set(key, { value: value, expiry: expiryTime });

    return !!existsAndNotExpired;
};

/** 
 * @param {number} key
 * @return {number} value associated with key
 */
TimeLimitedCache.prototype.get = function(key) {
    const currentTime = Date.now();
    const entry = this.cache.get(key);

    if (entry && entry.expiry > currentTime) {
        return entry.value;
    }

    return -1;
};

/** 
 * @return {number} count of non-expired keys
 */
TimeLimitedCache.prototype.count = function() {
    const currentTime = Date.now();
    let count = 0;

    for (let [key, entry] of this.cache) {
        if (entry.expiry > currentTime) {
            count++;
        }
    }

    return count;
};
